Beim meinem CPP Projekt handelt es sich um eine erweiterbare Version von TickTackToe (BIGTackToe), bei dem die Größe des Feldes
und die Länge der Reihe/Diagonale/Spalte. um zu gewinnen, angepasst werden können.

Im Main des Programms werden im Header UserInterface ausgelagerte Funktionen für ein Menü aufgerufen, mit welchem ein Spiel gestartet werden kann, Bots iterativ
auf Winrate getestet werden können oder Einstellungen bezüglich fieldSize und winSize getroffen werden können. Diese werden im Namespace staticData abgespeichert
und können durch einen Header einfach in Klassen inkludiert werden, ohne dass diese durch Konstruktoren/ Vetter übergeben werden müssen.
Mit der Klasse GameControl mit der Methode startGame() kann ein neues Spiel gestartet werden, welches den kompletten Spielablauf regelt und
schließlich den Gewinner zurückgibt.
Für den Spielablauf benötigt GameControl das Spielfeld der Klasse Field, welches aus einem 2D-Vektor (da flexible Größe des Feldes) und
einer Liste mit Tupeln der noch freien Feldern besteht.
Desweiteren benötigt GameControl 2 Spieler der Klasse Player. Diese werden beim Erstellen eines Spiels übergeben werden. Die Klasse Player besitzt die vier Subklassen,
welche die virtuelle Methode move() überschreiben:
StupidBot: Wählt das erste Element der BlankList -> setzt immer möglichst weit links
RandomBot: Wählt ein zufälliges Element der BlankList -> setzt zufällig
SmartBot: Kopiert das Feld und testet erst für jedes Element der BlankList, ob er mit diesem gewinnen kann und setzt in diesem Fall
	  Daraufhin testet er auf gleiche Weise ober der Gegner in einem Zug gewinnen kann, und verhindert es in diesem Fall
	  Trifft keine der beiden Fälle auf kann er entweder zufällig (RandomBot) oder in einer Reihenfolge(StupidBot, aber rückwärts) agieren.
	  In Reihenfolge hat hierbei eine etwas höhere Gewinnchance gegen Bots, ist aber für Menschen sehr durchaschaubar.
	  Zufällig ist die Gewinnchance gegen Bots etwas geringer, dafür ist er gegen Menschen sehr viel besser 
	  (Dies kann nur durch den Return-Wert der SmartBot->move() Methode gewechselt werden. Alternativ hätte natürlich eine
	   neue klasse erstellt werden können, die sich nur in Namen und Return-Wert unterscheidet)
Die move Methode übergibt jeweils ein Tupel der Koordination (so können X-und Y-Wert einfach als Paar übergeben werden).
Dieses wird (falls möglich) gesetzt und entsprechendes Feld aus der BlankList entfernt.
Ist die WinCondition, ist der andere Spieler am Zug und der Spaß wird wiederholt.

Die WinCondition ist durch den Namespace checkWin realisiert, wodurch die Methoden ausgelagert werden können und sowohl von
GameControl als auch SmartBot verwendet werden können. Durch die Methode checkWin::all(..) wird überprüft, ob der Spieler 
Diagonal/ in Reihe/ in Spalte gewonnen hat. In diesem Fall wird das spielt beendet und der Gewinner an das Main zu-
rückgegeben.
Desweiteren wird auf ein Draw übeprüft, sollten alle Felder besetzt sein.

Durch die Test-Option im Hauptmenü können 2 auswählbare Bots gegeneinander mit beliebig vielen Iteration/ beliebter fieldSize/winSize
gegeneinander antreten und Ergebnisse ausgewertet werden.
Reminder: Der SmartBot agiert SEHR resourcen-verschwenderisch. Dementsprechend lange sind Rechenzeit für große Felder bzw viele Iterationen.
(Er arbeitet mit o(n^3) pro Zug). Ein 10x10 Feld mit 1000 Iteration dauert etwa 20min. 

Die Benutzung des Programms ist durch ein Konsolenmenü geregelt und selbsterklärend (lediglich die Auswahl des Returns des SmartBot wird im Code geregelt).

Des weiteren können im Projekt Test Unit Tests zu den einzelnen Funktionen ausgeführt werden. 
Bei den unit Tests zu den winrates des SmartBot werden nur Siege/Niederlagen berücksichtigt,da es bei TickTackToe sehr häufig zu draws kommt.
Aufgrund dieser Tests dauert das Test-Programm aufgrund der Komplexität des SmartBot auch einige Minuten.




